# Generated by Django 3.2.18 on 2023-02-20 12:14

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(max_length=32, verbose_name='Firstname')),
                ('last_name', models.CharField(max_length=32, verbose_name='Lastname')),
                ('email', models.EmailField(help_text='Укажи свой e-mail.', max_length=64, unique=True, verbose_name='Email')),
                ('role', models.CharField(choices=[('user', 'user'), ('premiumuser', 'premiumuser')], default='user', max_length=14, verbose_name='Roles')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('username',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Mem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True, verbose_name='Название мема')),
                ('image', models.ImageField(upload_to='images/', verbose_name='Изображение мема')),
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата публикации')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='Продвижение мема')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mems', to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Мем',
                'verbose_name_plural': 'Мемы',
                'ordering': ('pub_date',),
            },
        ),
        migrations.CreateModel(
            name='Сommunity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True, verbose_name='Название сообщества')),
                ('description', models.CharField(max_length=1024, unique=True, verbose_name='Описание сообщества')),
                ('slug', models.SlugField(max_length=64, unique=True, verbose_name='Slug сообщества')),
                ('mems', models.ManyToManyField(blank=True, related_name='community', to='mems.Mem')),
                ('users', models.ManyToManyField(blank=True, related_name='community', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Мемное сообщество',
                'verbose_name_plural': 'Мемные сообщества',
            },
        ),
        migrations.CreateModel(
            name='LikeDislike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote', models.SmallIntegerField(choices=[(-1, 'Не нравится'), (1, 'Нравится')], verbose_name='Голос')),
                ('mem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likesdislikes', to='mems.mem', verbose_name='Мем')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Голос',
                'verbose_name_plural': 'Голоса',
            },
        ),
        migrations.AddConstraint(
            model_name='likedislike',
            constraint=models.UniqueConstraint(fields=('user', 'mem'), name='unique_for_user_mem'),
        ),
    ]
